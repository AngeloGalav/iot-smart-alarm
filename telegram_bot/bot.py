"""
Placeholder python script for the telegram bot.
99% generated by chatgpt for now. Will change later.
"""

from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import os
import json
from telegram_bot.telegram_secrets import TELEGRAM_BOT_TOKEN

# Placeholder for alarm settings
alarm_settings = {
    "time": "07:00",
    "days": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
    "sound": "normal"
}

# Command: /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "Welcome to the Alarm Settings Bot!\n\n"
        "You can configure your alarm with the following commands:\n"
        "- /set_time HH:MM\n"
        "- /set_days Monday Tuesday ...\n"
        "- /set_sound normal/angry\n"
        "- /view_settings"
    )

# Command: /set_time
def set_time(update: Update, context: CallbackContext):
    global alarm_settings
    if len(context.args) != 1:
        update.message.reply_text("Usage: /set_time HH:MM")
        return

    time = context.args[0]
    if len(time) == 5 and time[2] == ":" and time[:2].isdigit() and time[3:].isdigit():
        alarm_settings["time"] = time
        update.message.reply_text(f"Alarm time set to {time}.")
    else:
        update.message.reply_text("Invalid time format. Use HH:MM.")

# Command: /set_days
def set_days(update: Update, context: CallbackContext):
    global alarm_settings
    days = context.args
    if not days:
        update.message.reply_text("Usage: /set_days Monday Tuesday ...")
        return

    valid_days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}
    if all(day in valid_days for day in days):
        alarm_settings["days"] = list(days)
        update.message.reply_text(f"Alarm days set to: {', '.join(days)}.")
    else:
        update.message.reply_text("Invalid days. Please use full weekday names.")

# Command: /set_sound
def set_sound(update: Update, context: CallbackContext):
    global alarm_settings
    if len(context.args) != 1:
        update.message.reply_text("Usage: /set_sound normal/angry")
        return

    sound = context.args[0].lower()
    if sound in ["normal", "angry"]:
        alarm_settings["sound"] = sound
        update.message.reply_text(f"Alarm sound set to {sound}.")
    else:
        update.message.reply_text("Invalid sound. Choose either 'normal' or 'angry'.")

# Command: /view_settings
def view_settings(update: Update, context: CallbackContext):
    global alarm_settings
    settings_json = json.dumps(alarm_settings, indent=2)
    update.message.reply_text(f"Current Alarm Settings:\n\n{settings_json}")

# Main function to start the bot
def main():
    updater = Updater(TELEGRAM_BOT_TOKEN)
    dispatcher = updater.dispatcher

    # Register command handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("set_time", set_time))
    dispatcher.add_handler(CommandHandler("set_days", set_days))
    dispatcher.add_handler(CommandHandler("set_sound", set_sound))
    dispatcher.add_handler(CommandHandler("view_settings", view_settings))

    # Start polling
    updater.start_polling()
    print("Telegram bot is running...")
    updater.idle()

if __name__ == "__main__":
    main()
